// ----- ----- ----- ----- //
// ----- Visibility  ----- //
// ----- ----- ----- ----- //

@mixin hide-for($sizeName, $only:false) {
  @if $only {
    $next-break-point-value: #{map-get-next-by-key($breakpoints, $sizeName)};
    @if $next-break-point-value {
      @media screen and (min-width: #{map-get($breakpoints, $sizeName)}) and (max-width: #{$next-break-point-value - 1}) {
        display: none;
      }
    }
  }
  @else {
    @media screen and (min-width: #{map-get($breakpoints, $sizeName)}) {
      display: none;
    }
  }
}

@mixin show-for($sizeName, $only:false) {
  @if $only not false {
    $next-break-point-value: #{map-get-next-by-key($breakpoints, $sizeName)};
    @if $next-break-point-value {
      @media screen and (min-width: #{map-get($breakpoints, $sizeName)}) and (max-width: #{$next-break-point-value - 1}) {
        display: block;
      }
    }
  }
  @else {
    @media screen and (min-width: #{map-get($breakpoints, $sizeName)}) {
      display: block;
    }
  }
}

// Creates CSS classes
@mixin visibility-show-rules() {
  @each $name, $size in $breakpoints {
    .show-for-#{$name} {
      @include show-for($name);
    }

    $next-break-point-value: #{map-get-next-by-key($breakpoints, $name)};
    @if $next-break-point-value != 'false' {
      .show-for-#{$name}-only {
        @include show-for($name, only);
      }
    }
  }
}

@mixin visibility-hide-rules() {
  @each $name, $size in $breakpoints {
    .hide-for-#{$name} {
      @include hide-for($name);
    }

    $next-break-point-value: #{map-get-next-by-key($breakpoints, $name)};
    @if $next-break-point-value != 'false' {
      .show-for-#{$name}-only {
        @include show-for($name, only);
      }
    }
  }
}
